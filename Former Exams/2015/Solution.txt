BPRD 2015 Eksamensset

Opgave 1 

Regex: e(fd*) * x
1.1)

- ex
- efx
- efdx
- efddddx
- efdfdx
- efddfdfdddx

Udtrykket beskriver strenge der starter med e slutter med x og har 0 eller et vilkårligt antal af: et f og 0 eller et vilkårligt antal af d.

1.2
tegnet

1.3
tegnet

1.4
for at matche stengene er følgede regex udformet
	
	f(s*d*)*

Opgave 2

2.1)
type expr = 
  | CstI of int
  | CstB of bool
  | Var of string
  | Let of string * expr * expr
  | Prim of string * expr * expr
  | If of expr * expr * expr
  | Letfun of string * string * expr * expr    (* (f, x, fBody, letBody) *)
  | Call of expr * expr
  | Pair of (expr * expr)
  | Fst of (expr * expr)
  | Snd of (expr * expr)


2.2
type value = 
  | Int of int
  | PairValue of value * value
  | Closure of string * string * expr * value env       (* (f, x, fBody, fDeclEnv) *)

let rec eval (e : expr) (env : value env) : value =
    match e with
    | CstI i -> Int i
    | CstB b -> Int (if b then 1 else 0)
    | Var x  -> lookup env x
    | Prim(ope, e1, e2) -> 
      let v1 = eval e1 env
      let v2 = eval e2 env
      match (ope, v1, v2) with
      | ("*", Int i1, Int i2) -> Int (i1 * i2)
      | ("+", Int i1, Int i2) -> Int (i1 + i2)
      | ("-", Int i1, Int i2) -> Int (i1 - i2)
      | ("=", Int i1, Int i2) -> Int (if i1 = i2 then 1 else 0)
      | ("<", Int i1, Int i2) -> Int (if i1 < i2 then 1 else 0)
      |  _ -> failwith "unknown primitive or wrong type"
    | Let(x, eRhs, letBody) -> 
      let xVal = eval eRhs env
      let letEnv = (x, xVal) :: env 
      eval letBody letEnv
    | If(e1, e2, e3) -> 
      match eval e1 env with
      | Int 0 -> eval e3 env
      | Int _ -> eval e2 env
      | _     -> failwith "eval If"
    | Letfun(f, x, fBody, letBody) -> 
      let bodyEnv = (f, Closure(f, x, fBody, env)) :: env
      eval letBody bodyEnv
    | Call(eFun, eArg) -> 
      let fClosure = eval eFun env
      match fClosure with
      | Closure (f, x, fBody, fDeclEnv) ->
        let xVal = eval eArg env
        let fBodyEnv = (x, xVal) :: (f, fClosure) :: fDeclEnv
        in eval fBody fBodyEnv
      | _ -> failwith "eval Call: not a function"
    | Pair(e1,e2)         -> PairValue(eval e1 env, eval e2 env)
    | Fst(Pair(e1,e2))    -> eval e1 env
    | Snd(Pair(e1,e2))    -> eval e2 env
    | _     -> failwith "unknown primitive or wrong type"


2.3

> eval (Pair(CstI 1, CstB false)) [];;
val it : HigherFun.value = PairValue (Int 1,Int 0)

> eval (Pair(Pair(CstB true, CstB false), Pair(CstI 10, CstI 20))) [];;
val it : HigherFun.value = PairValue (PairValue (Int 1,Int 0),PairValue (Int 10,Int 20))

> eval (Pair(Pair(CstB true, CstB false), Pair(CstI 10, Var "x"))) [("x", Int 2)];;
val it : value = PairValue (PairValue (Int 1,Int 0),PairValue (Int 10,Int 2))

> eval (Pair(Snd(Pair(CstB true, CstB false)), Fst(Pair(CstI 10, Var "x")))) [("x", Int 2)];;
val it : value = PairValue (Int 0,Int 10)

> eval (Pair(Var "f", CstI 10)) [("f", Closure("f","x",Prim("+", CstI 1, CstI 1),[]))]
val it : value = PairValue (Closure ("f","x",Prim ("+",CstI 1,CstI 1),[]),Int 10)


2.4

FunLex
let keyword s =
    match s with
    | "else"  -> ELSE 
    | "end"   -> END
    | "false" -> CSTBOOL false
    | "if"    -> IF
    | "in"    -> IN
    | "let"   -> LET
    | "not"   -> NOT
    | "then"  -> THEN
    | "fst"   -> FST
    | "snd"   -> SND
    | "true"  -> CSTBOOL true
    | _       -> NAME s
}

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | "(*"            { commentStart := lexbuf.StartPos;
                      commentDepth := 1; 
                      SkipComment lexbuf; Token lexbuf }
  | '='             { EQ }
  | "<>"            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | '+'             { PLUS }                     
  | '-'             { MINUS }                     
  | '*'             { TIMES }                     
  | '/'             { DIV }                     
  | '%'             { MOD }
  | '('             { LPAR }
  | ')'             { RPAR }
  | ','             { COMMA }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }


FunPar:

Expr:
    AtExpr                              { $1                     }
  | AppExpr                             { $1                     }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)         }
  | MINUS Expr                          { Prim("-", CstI 0, $2)  }
  | Expr PLUS  Expr                     { Prim("+",  $1, $3)     }
  | Expr MINUS Expr                     { Prim("-",  $1, $3)     }
  | Expr TIMES Expr                     { Prim("*",  $1, $3)     }
  | Expr DIV   Expr                     { Prim("/",  $1, $3)     } 
  | Expr MOD   Expr                     { Prim("%",  $1, $3)     }
  | Expr EQ    Expr                     { Prim("=",  $1, $3)     }
  | Expr NE    Expr                     { Prim("<>", $1, $3)     }
  | Expr GT    Expr                     { Prim(">",  $1, $3)     }
  | Expr LT    Expr                     { Prim("<",  $1, $3)     }
  | Expr GE    Expr                     { Prim(">=", $1, $3)     }
  | Expr LE    Expr                     { Prim("<=", $1, $3)     }
  | FST Pair                            { Fst($2)                }
  | SND Pair                            { Snd($2)                }
;

AtExpr:
    Const                               { $1                     }
  | NAME                                { Var $1                 }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)        }
  | LET NAME NAME EQ Expr IN Expr END   { Letfun($2, $3, $5, $7) }
  | LPAR Expr RPAR                      { $2                     }
;

Pair:
    LPAR Expr COMMA Expr RPAR           { Pair($2, $4)           }
;

AppExpr:
    AtExpr AtExpr                       { Call($1, $2)           }
  | AppExpr AtExpr                      { Call($1, $2)           }
;

Const:
    CSTINT                              { CstI($1)               }
  | CSTBOOL                             { CstB($1)               }
  | Pair                                { $1                     }
;


2.5

Lav eksemplerne ovenfor (jeg har tjekekt det)


2.6



opgave 3

3.1)

open ParseAndComp;;
compileToFile (fromFile "Opgave3Test1.c") "test1.out";;
 #q;;

javac Machine.java
java Machine test1.out

3.1)

open ParseAndComp;;
compileToFile (fromFile "Opgave3Test2.c") "test2.out";;
 #q;;

javac Machine.java
java Machine test2.out


void main() {
  int arr[3];
  arr[0] = 1;
  arr[1] = 10;
  arr[2] = 100;
  int i;
  i = 0;
  int sum;
  sum = 0;
  while (i < |arr|) {
    sum = sum + arr[i];
    i = i+1;
  }
  print sum;
}



3.2



opgave 4

open ParseAndComp;;
compileToFile (fromFile "Opgave4Test1.c") "test1.out";;
 #q;;

javac Machine.java
java Machine test1.out