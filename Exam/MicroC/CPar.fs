// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOTLT
  | DOTGT
  | DOTLE
  | DOTGE
  | DOTEQ
  | DOTNE
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOTLT
    | TOKEN_DOTGT
    | TOKEN_DOTLE
    | TOKEN_DOTGE
    | TOKEN_DOTEQ
    | TOKEN_DOTNE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_Check
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOTLT  -> 1 
  | DOTGT  -> 2 
  | DOTLE  -> 3 
  | DOTGE  -> 4 
  | DOTEQ  -> 5 
  | DOTNE  -> 6 
  | LPAR  -> 7 
  | RPAR  -> 8 
  | LBRACE  -> 9 
  | RBRACE  -> 10 
  | LBRACK  -> 11 
  | RBRACK  -> 12 
  | SEMI  -> 13 
  | COMMA  -> 14 
  | ASSIGN  -> 15 
  | AMP  -> 16 
  | NOT  -> 17 
  | SEQOR  -> 18 
  | SEQAND  -> 19 
  | EQ  -> 20 
  | NE  -> 21 
  | GT  -> 22 
  | LT  -> 23 
  | GE  -> 24 
  | LE  -> 25 
  | PLUS  -> 26 
  | MINUS  -> 27 
  | TIMES  -> 28 
  | DIV  -> 29 
  | MOD  -> 30 
  | CHAR  -> 31 
  | ELSE  -> 32 
  | IF  -> 33 
  | INT  -> 34 
  | NULL  -> 35 
  | PRINT  -> 36 
  | PRINTLN  -> 37 
  | RETURN  -> 38 
  | VOID  -> 39 
  | WHILE  -> 40 
  | CSTSTRING _ -> 41 
  | NAME _ -> 42 
  | CSTINT _ -> 43 
  | CSTBOOL _ -> 44 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOTLT 
  | 2 -> TOKEN_DOTGT 
  | 3 -> TOKEN_DOTLE 
  | 4 -> TOKEN_DOTGE 
  | 5 -> TOKEN_DOTEQ 
  | 6 -> TOKEN_DOTNE 
  | 7 -> TOKEN_LPAR 
  | 8 -> TOKEN_RPAR 
  | 9 -> TOKEN_LBRACE 
  | 10 -> TOKEN_RBRACE 
  | 11 -> TOKEN_LBRACK 
  | 12 -> TOKEN_RBRACK 
  | 13 -> TOKEN_SEMI 
  | 14 -> TOKEN_COMMA 
  | 15 -> TOKEN_ASSIGN 
  | 16 -> TOKEN_AMP 
  | 17 -> TOKEN_NOT 
  | 18 -> TOKEN_SEQOR 
  | 19 -> TOKEN_SEQAND 
  | 20 -> TOKEN_EQ 
  | 21 -> TOKEN_NE 
  | 22 -> TOKEN_GT 
  | 23 -> TOKEN_LT 
  | 24 -> TOKEN_GE 
  | 25 -> TOKEN_LE 
  | 26 -> TOKEN_PLUS 
  | 27 -> TOKEN_MINUS 
  | 28 -> TOKEN_TIMES 
  | 29 -> TOKEN_DIV 
  | 30 -> TOKEN_MOD 
  | 31 -> TOKEN_CHAR 
  | 32 -> TOKEN_ELSE 
  | 33 -> TOKEN_IF 
  | 34 -> TOKEN_INT 
  | 35 -> TOKEN_NULL 
  | 36 -> TOKEN_PRINT 
  | 37 -> TOKEN_PRINTLN 
  | 38 -> TOKEN_RETURN 
  | 39 -> TOKEN_VOID 
  | 40 -> TOKEN_WHILE 
  | 41 -> TOKEN_CSTSTRING 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTINT 
  | 44 -> TOKEN_CSTBOOL 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtU 
    | 31 -> NONTERM_StmtU 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_Expr 
    | 35 -> NONTERM_ExprNotAccess 
    | 36 -> NONTERM_ExprNotAccess 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_Check 
    | 56 -> NONTERM_Check 
    | 57 -> NONTERM_Check 
    | 58 -> NONTERM_Check 
    | 59 -> NONTERM_Check 
    | 60 -> NONTERM_Check 
    | 61 -> NONTERM_AtExprNotAccess 
    | 62 -> NONTERM_AtExprNotAccess 
    | 63 -> NONTERM_AtExprNotAccess 
    | 64 -> NONTERM_Access 
    | 65 -> NONTERM_Access 
    | 66 -> NONTERM_Access 
    | 67 -> NONTERM_Access 
    | 68 -> NONTERM_Access 
    | 69 -> NONTERM_Exprs 
    | 70 -> NONTERM_Exprs 
    | 71 -> NONTERM_Exprs1 
    | 72 -> NONTERM_Exprs1 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Const 
    | 75 -> NONTERM_Const 
    | 76 -> NONTERM_Const 
    | 77 -> NONTERM_Type 
    | 78 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOTLT  -> "DOTLT" 
  | DOTGT  -> "DOTGT" 
  | DOTLE  -> "DOTLE" 
  | DOTGE  -> "DOTGE" 
  | DOTEQ  -> "DOTEQ" 
  | DOTNE  -> "DOTNE" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOTLT  -> (null : System.Object) 
  | DOTGT  -> (null : System.Object) 
  | DOTLE  -> (null : System.Object) 
  | DOTGE  -> (null : System.Object) 
  | DOTEQ  -> (null : System.Object) 
  | DOTNE  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 8us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 67us; 6us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 6us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 66us; 64us; 68us; 31us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 74us; 75us; 77us; 102us; 80us; 81us; 82us; 83us; 103us; 85us; 104us; 86us; 105us; 87us; 106us; 88us; 107us; 89us; 108us; 90us; 109us; 91us; 110us; 92us; 111us; 93us; 112us; 94us; 113us; 95us; 114us; 96us; 115us; 97us; 116us; 99us; 117us; 100us; 125us; 98us; 136us; 101us; 139us; 102us; 31us; 65535us; 37us; 71us; 40us; 71us; 43us; 71us; 50us; 71us; 56us; 71us; 58us; 71us; 59us; 71us; 62us; 71us; 64us; 71us; 74us; 71us; 77us; 71us; 80us; 71us; 82us; 71us; 103us; 71us; 104us; 71us; 105us; 71us; 106us; 71us; 107us; 71us; 108us; 71us; 109us; 71us; 110us; 71us; 111us; 71us; 112us; 71us; 113us; 71us; 114us; 71us; 115us; 71us; 116us; 71us; 117us; 71us; 125us; 72us; 136us; 71us; 139us; 71us; 25us; 65535us; 48us; 116us; 52us; 116us; 57us; 116us; 63us; 116us; 75us; 116us; 81us; 116us; 83us; 116us; 85us; 116us; 86us; 116us; 87us; 116us; 88us; 116us; 89us; 116us; 90us; 116us; 91us; 116us; 92us; 116us; 93us; 116us; 94us; 116us; 95us; 116us; 96us; 116us; 97us; 116us; 98us; 116us; 99us; 117us; 100us; 117us; 101us; 116us; 102us; 116us; 32us; 65535us; 37us; 73us; 40us; 73us; 43us; 73us; 50us; 73us; 56us; 73us; 58us; 73us; 59us; 73us; 62us; 73us; 64us; 73us; 74us; 73us; 77us; 73us; 80us; 73us; 82us; 73us; 103us; 73us; 104us; 73us; 105us; 73us; 106us; 73us; 107us; 73us; 108us; 73us; 109us; 73us; 110us; 73us; 111us; 73us; 112us; 73us; 113us; 73us; 114us; 73us; 115us; 73us; 116us; 73us; 117us; 73us; 125us; 73us; 133us; 135us; 136us; 73us; 139us; 73us; 34us; 65535us; 37us; 70us; 40us; 70us; 43us; 70us; 50us; 70us; 56us; 70us; 58us; 70us; 59us; 70us; 62us; 70us; 64us; 70us; 74us; 70us; 77us; 70us; 80us; 70us; 82us; 70us; 103us; 70us; 104us; 70us; 105us; 70us; 106us; 70us; 107us; 70us; 108us; 70us; 109us; 70us; 110us; 70us; 111us; 70us; 112us; 70us; 113us; 70us; 114us; 70us; 115us; 70us; 116us; 70us; 117us; 70us; 125us; 69us; 127us; 128us; 130us; 131us; 133us; 134us; 136us; 70us; 139us; 70us; 1us; 65535us; 77us; 78us; 2us; 65535us; 77us; 138us; 139us; 140us; 32us; 65535us; 37us; 124us; 40us; 124us; 43us; 124us; 50us; 124us; 56us; 124us; 58us; 124us; 59us; 124us; 62us; 124us; 64us; 124us; 74us; 124us; 77us; 124us; 80us; 124us; 82us; 124us; 103us; 124us; 104us; 124us; 105us; 124us; 106us; 124us; 107us; 124us; 108us; 124us; 109us; 124us; 110us; 124us; 111us; 124us; 112us; 124us; 113us; 124us; 114us; 124us; 115us; 124us; 116us; 124us; 117us; 124us; 125us; 124us; 133us; 124us; 136us; 124us; 139us; 124us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 42us; 46us; 51us; 58us; 65us; 97us; 129us; 155us; 188us; 223us; 225us; 228us; 261us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 30us; 1us; 23us; 15us; 24us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 15us; 26us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 26us; 1us; 27us; 3us; 28us; 30us; 31us; 3us; 28us; 30us; 31us; 17us; 28us; 30us; 31us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 3us; 28us; 30us; 31us; 2us; 28us; 30us; 1us; 28us; 2us; 29us; 32us; 2us; 29us; 32us; 16us; 29us; 32us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 2us; 29us; 32us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 4us; 33us; 36us; 65us; 68us; 3us; 33us; 36us; 68us; 1us; 34us; 2us; 34us; 62us; 1us; 35us; 1us; 36us; 15us; 36us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 2us; 37us; 64us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 15us; 38us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 39us; 15us; 39us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 40us; 15us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 14us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 16us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 54us; 15us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 68us; 16us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 71us; 72us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 2us; 54us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 2us; 62us; 65us; 1us; 62us; 1us; 63us; 2us; 63us; 68us; 1us; 64us; 1us; 65us; 2us; 65us; 68us; 1us; 65us; 2us; 66us; 67us; 2us; 66us; 68us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 70us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 124us; 126us; 129us; 131us; 147us; 149us; 151us; 155us; 159us; 177us; 181us; 184us; 186us; 189us; 192us; 209us; 212us; 214us; 216us; 218us; 220us; 225us; 229us; 231us; 234us; 236us; 238us; 254us; 257us; 259us; 261us; 263us; 265us; 281us; 283us; 299us; 301us; 317us; 333us; 349us; 365us; 381us; 397us; 413us; 429us; 445us; 461us; 477us; 493us; 509us; 524us; 540us; 557us; 573us; 590us; 592us; 594us; 596us; 598us; 600us; 602us; 604us; 606us; 608us; 610us; 612us; 614us; 616us; 618us; 621us; 623us; 625us; 627us; 629us; 631us; 633us; 635us; 638us; 640us; 642us; 645us; 647us; 649us; 652us; 654us; 657us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 678us; 680us; 682us; 684us; |]
let _fsyacc_action_rows = 148
let _fsyacc_actionTableElements = [|3us; 16386us; 31us; 147us; 34us; 146us; 39us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 31us; 147us; 34us; 146us; 39us; 23us; 0us; 16387us; 1us; 32768us; 13us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 7us; 16us; 28us; 14us; 42us; 12us; 3us; 32768us; 7us; 16us; 28us; 14us; 42us; 13us; 1us; 16390us; 11us; 19us; 0us; 16391us; 1us; 16391us; 7us; 29us; 3us; 32768us; 7us; 16us; 28us; 14us; 42us; 12us; 1us; 16392us; 11us; 19us; 3us; 32768us; 7us; 16us; 28us; 14us; 42us; 12us; 2us; 32768us; 8us; 18us; 11us; 19us; 0us; 16393us; 2us; 32768us; 12us; 20us; 43us; 21us; 0us; 16394us; 1us; 32768us; 12us; 22us; 0us; 16395us; 1us; 32768us; 42us; 24us; 1us; 32768us; 7us; 25us; 2us; 16398us; 31us; 147us; 34us; 146us; 1us; 32768us; 8us; 27us; 1us; 32768us; 9us; 37us; 0us; 16396us; 2us; 16398us; 31us; 147us; 34us; 146us; 1us; 32768us; 8us; 31us; 1us; 32768us; 9us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 14us; 35us; 2us; 32768us; 31us; 147us; 34us; 146us; 0us; 16401us; 17us; 16403us; 7us; 125us; 9us; 37us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 31us; 147us; 33us; 55us; 34us; 146us; 35us; 145us; 36us; 82us; 37us; 84us; 38us; 50us; 40us; 61us; 42us; 76us; 43us; 141us; 44us; 142us; 1us; 32768us; 10us; 39us; 0us; 16402us; 17us; 16403us; 7us; 125us; 9us; 37us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 31us; 147us; 33us; 55us; 34us; 146us; 35us; 145us; 36us; 82us; 37us; 84us; 38us; 50us; 40us; 61us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16404us; 1us; 32768us; 13us; 43us; 17us; 16403us; 7us; 125us; 9us; 37us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 31us; 147us; 33us; 55us; 34us; 146us; 35us; 145us; 36us; 82us; 37us; 84us; 38us; 50us; 40us; 61us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 32us; 59us; 0us; 16407us; 20us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 13us; 49us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 0us; 16408us; 12us; 32768us; 7us; 125us; 13us; 51us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16409us; 20us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 13us; 53us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 7us; 56us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 20us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 8us; 58us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 15us; 32768us; 7us; 125us; 9us; 37us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 33us; 55us; 35us; 145us; 36us; 82us; 37us; 84us; 38us; 50us; 40us; 61us; 42us; 76us; 43us; 141us; 44us; 142us; 15us; 32768us; 7us; 125us; 9us; 37us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 33us; 55us; 35us; 145us; 36us; 82us; 37us; 84us; 38us; 50us; 40us; 61us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16412us; 1us; 32768us; 7us; 62us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 20us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 8us; 64us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 15us; 32768us; 7us; 125us; 9us; 37us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 33us; 55us; 35us; 145us; 36us; 82us; 37us; 84us; 38us; 50us; 40us; 61us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 3us; 16417us; 8us; 132us; 11us; 136us; 15us; 74us; 2us; 16417us; 11us; 136us; 15us; 74us; 0us; 16418us; 1us; 16418us; 8us; 126us; 0us; 16419us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 19us; 16420us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 1us; 16448us; 7us; 77us; 11us; 16453us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 1us; 32768us; 8us; 79us; 0us; 16421us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16422us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 19us; 16423us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 0us; 16424us; 3us; 16425us; 28us; 105us; 29us; 106us; 30us; 107us; 3us; 16426us; 28us; 105us; 29us; 106us; 30us; 107us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 13us; 16430us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 13us; 16431us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 13us; 16432us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 13us; 16433us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 13us; 16434us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 13us; 16435us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 17us; 16436us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 18us; 16437us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 19us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 19us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 19us; 16438us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 20us; 32768us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 12us; 137us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 20us; 16455us; 1us; 118us; 2us; 119us; 3us; 120us; 4us; 121us; 5us; 122us; 6us; 123us; 14us; 139us; 18us; 115us; 19us; 114us; 20us; 108us; 21us; 109us; 22us; 110us; 23us; 111us; 24us; 112us; 25us; 113us; 26us; 103us; 27us; 104us; 28us; 105us; 29us; 106us; 30us; 107us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16446us; 3us; 32768us; 7us; 130us; 28us; 133us; 42us; 129us; 1us; 16447us; 11us; 136us; 0us; 16448us; 3us; 32768us; 7us; 130us; 28us; 133us; 42us; 129us; 2us; 32768us; 8us; 132us; 11us; 136us; 0us; 16449us; 8us; 32768us; 7us; 125us; 16us; 127us; 27us; 143us; 28us; 133us; 35us; 145us; 42us; 129us; 43us; 141us; 44us; 142us; 1us; 16450us; 11us; 136us; 0us; 16451us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16452us; 0us; 16454us; 11us; 32768us; 7us; 125us; 16us; 127us; 17us; 80us; 27us; 143us; 28us; 133us; 35us; 145us; 36us; 82us; 37us; 84us; 42us; 76us; 43us; 141us; 44us; 142us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 1us; 32768us; 43us; 144us; 0us; 16459us; 0us; 16460us; 0us; 16461us; 0us; 16462us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 96us; 98us; 99us; 117us; 118us; 120us; 138us; 139us; 140us; 142us; 143us; 164us; 165us; 178us; 179us; 200us; 201us; 202us; 204us; 216us; 237us; 253us; 269us; 270us; 272us; 284us; 305us; 321us; 322us; 323us; 324us; 325us; 329us; 332us; 333us; 335us; 336us; 348us; 368us; 370us; 382us; 384us; 385us; 397us; 398us; 410us; 430us; 431us; 435us; 439us; 440us; 441us; 442us; 456us; 470us; 484us; 498us; 512us; 526us; 544us; 563us; 583us; 603us; 623us; 644us; 665us; 677us; 689us; 701us; 713us; 725us; 737us; 749us; 761us; 773us; 785us; 797us; 809us; 821us; 833us; 845us; 846us; 847us; 848us; 849us; 850us; 851us; 852us; 864us; 865us; 869us; 871us; 872us; 876us; 879us; 880us; 889us; 891us; 892us; 904us; 905us; 906us; 918us; 919us; 920us; 921us; 923us; 924us; 925us; 926us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 7us; 5us; 5us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 16414us; 16415us; 16416us; 65535us; 65535us; 16418us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16439us; 16440us; 16441us; 16442us; 16443us; 16444us; 16445us; 65535us; 16446us; 65535us; 65535us; 16448us; 65535us; 65535us; 16449us; 65535us; 65535us; 16451us; 65535us; 16452us; 16454us; 65535us; 16456us; 16457us; 16458us; 65535us; 16459us; 16460us; 16461us; 16462us; |]
let _fsyacc_reductions ()  =    [| 
# 438 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 447 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "CPar.fsy"
                                                               Prog _1 
                   )
# 43 "CPar.fsy"
                 : Absyn.program));
# 458 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CPar.fsy"
                                                               [] 
                   )
# 47 "CPar.fsy"
                 : 'Topdecs));
# 468 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 48 "CPar.fsy"
                 : 'Topdecs));
# 480 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 52 "CPar.fsy"
                 : 'Topdec));
# 491 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CPar.fsy"
                                                               _1 
                   )
# 53 "CPar.fsy"
                 : 'Topdec));
# 502 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 57 "CPar.fsy"
                 : 'Vardec));
# 514 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 61 "CPar.fsy"
                 : 'Vardesc));
# 525 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 62 "CPar.fsy"
                 : 'Vardesc));
# 536 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               _2                                      
                   )
# 63 "CPar.fsy"
                 : 'Vardesc));
# 547 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 64 "CPar.fsy"
                 : 'Vardesc));
# 558 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 65 "CPar.fsy"
                 : 'Vardesc));
# 570 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 69 "CPar.fsy"
                 : 'Fundec));
# 583 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 70 "CPar.fsy"
                 : 'Fundec));
# 597 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CPar.fsy"
                                                               [] 
                   )
# 74 "CPar.fsy"
                 : 'Paramdecs));
# 607 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CPar.fsy"
                                                               _1 
                   )
# 75 "CPar.fsy"
                 : 'Paramdecs));
# 618 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CPar.fsy"
                                                               [_1]     
                   )
# 79 "CPar.fsy"
                 : 'Paramdecs1));
# 629 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 80 "CPar.fsy"
                 : 'Paramdecs1));
# 641 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CPar.fsy"
                                                               Block _2 
                   )
# 84 "CPar.fsy"
                 : 'Block));
# 652 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               [] 
                   )
# 88 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 662 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 89 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 674 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 90 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 686 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CPar.fsy"
                                                               _1 
                   )
# 94 "CPar.fsy"
                 : 'Stmt));
# 697 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CPar.fsy"
                                                               _1 
                   )
# 95 "CPar.fsy"
                 : 'Stmt));
# 708 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 99 "CPar.fsy"
                 : 'StmtM));
# 719 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                               Return None          
                   )
# 100 "CPar.fsy"
                 : 'StmtM));
# 729 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 101 "CPar.fsy"
                 : 'StmtM));
# 740 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               _1                   
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 751 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 764 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 776 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 108 "CPar.fsy"
                 : 'StmtU));
# 789 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 109 "CPar.fsy"
                 : 'StmtU));
# 801 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 110 "CPar.fsy"
                 : 'StmtU));
# 813 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                               Access _1           
                   )
# 114 "CPar.fsy"
                 : 'Expr));
# 824 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                               _1                  
                   )
# 115 "CPar.fsy"
                 : 'Expr));
# 835 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               _1                  
                   )
# 119 "CPar.fsy"
                 : 'ExprNotAccess));
# 846 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 120 "CPar.fsy"
                 : 'ExprNotAccess));
# 858 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 121 "CPar.fsy"
                 : 'ExprNotAccess));
# 870 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 122 "CPar.fsy"
                 : 'ExprNotAccess));
# 881 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 123 "CPar.fsy"
                 : 'ExprNotAccess));
# 892 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 124 "CPar.fsy"
                 : 'ExprNotAccess));
# 902 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 125 "CPar.fsy"
                 : 'ExprNotAccess));
# 914 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 126 "CPar.fsy"
                 : 'ExprNotAccess));
# 926 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 127 "CPar.fsy"
                 : 'ExprNotAccess));
# 938 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 128 "CPar.fsy"
                 : 'ExprNotAccess));
# 950 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 129 "CPar.fsy"
                 : 'ExprNotAccess));
# 962 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 130 "CPar.fsy"
                 : 'ExprNotAccess));
# 974 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 131 "CPar.fsy"
                 : 'ExprNotAccess));
# 986 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 132 "CPar.fsy"
                 : 'ExprNotAccess));
# 998 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 1010 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 1022 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 1034 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 1046 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 1058 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Check)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Check)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Andalso(Prim2(_2,_1,_3), Prim2(_4,_3,_5)) 
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 1073 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               "<"                   
                   )
# 142 "CPar.fsy"
                 : 'Check));
# 1083 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               ">"                   
                   )
# 143 "CPar.fsy"
                 : 'Check));
# 1093 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               "<="                  
                   )
# 144 "CPar.fsy"
                 : 'Check));
# 1103 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               ">="                  
                   )
# 145 "CPar.fsy"
                 : 'Check));
# 1113 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               "=="                  
                   )
# 146 "CPar.fsy"
                 : 'Check));
# 1123 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               "!="                  
                   )
# 147 "CPar.fsy"
                 : 'Check));
# 1133 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               CstI _1             
                   )
# 151 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1144 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               _2                  
                   )
# 152 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1155 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Addr _2             
                   )
# 153 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1166 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               AccVar _1           
                   )
# 157 "CPar.fsy"
                 : 'Access));
# 1177 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CPar.fsy"
                                                               _2                  
                   )
# 158 "CPar.fsy"
                 : 'Access));
# 1188 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 159 "CPar.fsy"
                 : 'Access));
# 1199 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 160 "CPar.fsy"
                 : 'Access));
# 1210 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 161 "CPar.fsy"
                 : 'Access));
# 1222 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               []       
                   )
# 165 "CPar.fsy"
                 : 'Exprs));
# 1232 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               _1       
                   )
# 166 "CPar.fsy"
                 : 'Exprs));
# 1243 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               [_1]     
                   )
# 170 "CPar.fsy"
                 : 'Exprs1));
# 1254 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 171 "CPar.fsy"
                 : 'Exprs1));
# 1266 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "CPar.fsy"
                                                               _1       
                   )
# 175 "CPar.fsy"
                 : 'Const));
# 1277 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "CPar.fsy"
                                                               _1       
                   )
# 176 "CPar.fsy"
                 : 'Const));
# 1288 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "CPar.fsy"
                                                               - _2     
                   )
# 177 "CPar.fsy"
                 : 'Const));
# 1299 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               -1       
                   )
# 178 "CPar.fsy"
                 : 'Const));
# 1309 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "CPar.fsy"
                                                               TypI     
                   )
# 182 "CPar.fsy"
                 : 'Type));
# 1319 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "CPar.fsy"
                                                               TypC     
                   )
# 183 "CPar.fsy"
                 : 'Type));
|]
# 1330 "CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
