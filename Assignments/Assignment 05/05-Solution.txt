Assignment 05
Anders Wind - awis@itu.dk


Exercise 7.1 : done

I have added micro-c and run the two examples

Exercise 7.2
... a few more examples
> open ParseAndRun;;
> run(fromFile "Exercise02/example01.c") [2];;
> run(fromFile "Exercise02/example02.c") [2];;
> run(fromFile "Exercise02/example03.c") [2];;
> run(fromFile "Exercise02/example04.c") [2];;

i)
> run(fromFile "Exercise02/i.c") [10];;
see Exercise02/i.c

ii)
> run(fromFile "Exercise02/ii.c") [5];;
see Exercise02/ii.c

iii)
> run(fromFile "Exercise02/iii.c") [7];;
see Exercise02/iii.c


Exercise 7.3
I have not used the clever solution to just use block while and Expr, but I have created my own abstract syntax type.

I have changed the following in Interp.fs
let rec exec stmt (locEnv : locEnv) (gloEnv : gloEnv) (store : store) : store = 
    match stmt with
    | If(e, stmt1, stmt2) -> 
      let (v, store1) = eval e locEnv gloEnv store
      if v<>0 then exec stmt1 locEnv gloEnv store1
              else exec stmt2 locEnv gloEnv store1
    | While(e, body) ->
      let rec loop store1 =
              let (v, store2) = eval e locEnv gloEnv store1
              if v<>0 then loop (exec body locEnv gloEnv store2)
                      else store2
      loop store
    | For(e1, e2, e3, body) ->
      let (valueInit, storeInit) = eval e1 locEnv gloEnv store
      let rec loop store1 =
              let (vCondition, store2) = eval e2 locEnv gloEnv store1
              if vCondition<>0 
                then
                    let store3 = exec body locEnv gloEnv store2
                    let (vAfter, storeFinal) = eval e3 locEnv gloEnv store3
                    loop storeFinal
                else store2
      loop storeInit
    | Expr e -> 
      let (_, store1) = eval e locEnv gloEnv store 
      store1 
    | Block stmts -> 
      let rec loop ss (locEnv, store) = 
          match ss with 
          | [ ] -> store
          | s1::sr -> loop sr (stmtordec s1 locEnv gloEnv store)
      loop stmts (locEnv, store) 
    | Return _ -> failwith "return not implemented"


I have changed the following in Absyn.fs

and stmt =                                                         
  | If of expr * stmt * stmt         (* Conditional                 *)
  | While of expr * stmt             (* While loop                  *)
  | For of expr * expr * expr * stmt (* for loop                  *)
  | Expr of expr                     (* Expression statement   e;   *)
  | Return of expr option            (* Return from method          *)
  | Block of stmtordec list          (* Block: grouping and scope   *)



I have changed the following in CLex.fsl

let keyword s =
    match s with
    | "char"    -> CHAR 
    | "else"    -> ELSE
    | "false"   -> CSTBOOL 0
    | "if"      -> IF
    | "int"     -> INT
    | "null"    -> NULL
    | "print"   -> PRINT
    | "println" -> PRINTLN
    | "return"  -> RETURN
    | "true"    -> CSTBOOL 1
    | "void"    -> VOID 
    | "while"   -> WHILE         
    | "for"     -> FOR   
    | _         -> NAME s


I have changed the following in CPar.fsy

%token CHAR ELSE IF INT NULL PRINT PRINTLN RETURN VOID WHILE FOR

StmtM:  /* No unbalanced if-else */
    Expr SEMI                                     { Expr($1)             }
  | RETURN SEMI                                   { Return None          }
  | RETURN Expr SEMI                              { Return(Some($2))     }
  | Block                                         { $1                   }
  | IF LPAR Expr RPAR StmtM ELSE StmtM            { If($3, $5, $7)       }
  | WHILE LPAR Expr RPAR StmtM                    { While($3, $5)        }
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtM  { For($3, $5, $7, $9)  }
;

StmtU:
    IF LPAR Expr RPAR StmtM ELSE StmtU            { If($3, $5, $7)       }
  | IF LPAR Expr RPAR Stmt                        { If($3, $5, Block []) }
  | WHILE LPAR Expr RPAR StmtU                    { While($3, $5)        }
  | FOR LPAR Expr SEMI Expr SEMI Expr RPAR StmtU  { For($3, $5, $7, $9)  }
;


i)
> run(fromFile "Exercise03/i.c") [10];;
see Exercise03/i.c

ii)
> run(fromFile "Exercise03/ii.c") [5];;
see Exercise03/ii.c

iii)
> run(fromFile "Exercise03/iii.c") [7];;
see Exercise03/iii.c



Exercise 7.4

in Absyn.fs I changed

and expr =                                                         
  | Access of access                 (* x    or  *p    or  a[e]     *)
  | Assign of access * expr          (* x=e  or  *p=e  or  a[e]=e   *)
  | Addr of access                   (* &x   or  &*p   or  &a[e]    *)
  | CstI of int                      (* Constant                    *)
  | Prim1 of string * expr           (* Unary primitive operator    *)
  | Prim2 of string * expr * expr    (* Binary primitive operator   *)
  | Andalso of expr * expr           (* Sequential and              *)
  | Orelse of expr * expr            (* Sequential or               *)
  | Call of string * expr list       (* Function call f(...)        *)
  | PreInc of access                 (* ++i                         *)
  | PreDec of access                 (* --i                         *)

  I have changed the following in Interp.fs

  and eval e locEnv gloEnv store : int * store = 
    match e with
    | Access acc     -> let (loc, store1) = access acc locEnv gloEnv store
                        (getSto store1 loc, store1) 
    | Assign(acc, e) -> let (loc, store1) = access acc locEnv gloEnv store
                        let (res, store2) = eval e locEnv gloEnv store1
                        (res, setSto store2 loc res) 
    | CstI i         -> (i, store)
    | Addr acc       -> access acc locEnv gloEnv store
    | Prim1(ope, e1) ->
      let (i1, store1) = eval e1 locEnv gloEnv store
      let res =
          match ope with
          | "!"      -> if i1=0 then 1 else 0
          | "printi" -> (printf "%d " i1; i1)
          | "printc" -> (printf "%c" (char i1); i1)
          | _        -> failwith ("unknown primitive " + ope)
      (res, store1) 
    | Prim2(ope, e1, e2) ->
      let (i1, store1) = eval e1 locEnv gloEnv store
      let (i2, store2) = eval e2 locEnv gloEnv store1
      let res =
          match ope with
          | "*"  -> i1 * i2
          | "+"  -> i1 + i2
          | "-"  -> i1 - i2
          | "/"  -> i1 / i2
          | "%"  -> i1 % i2
          | "==" -> if i1 =  i2 then 1 else 0
          | "!=" -> if i1 <> i2 then 1 else 0
          | "<"  -> if i1 <  i2 then 1 else 0
          | "<=" -> if i1 <= i2 then 1 else 0
          | ">=" -> if i1 >= i2 then 1 else 0
          | ">"  -> if i1 >  i2 then 1 else 0
          | _    -> failwith ("unknown primitive " + ope)
      (res, store2) 
    | Andalso(e1, e2) -> 
      let (i1, store1) as res = eval e1 locEnv gloEnv store
      if i1<>0 then eval e2 locEnv gloEnv store1 else res
    | Orelse(e1, e2) -> 
      let (i1, store1) as res = eval e1 locEnv gloEnv store
      if i1<>0 then res else eval e2 locEnv gloEnv store1
    | Call(f, es) -> callfun f es locEnv gloEnv store 
    | PreInc(acc) ->
        let (loc, store1) = access acc locEnv gloEnv store
        let value = (getSto store1 loc) + 1
        (value, setSto store1 loc value)
    | PreDec(acc) -> 
        let (loc, store1) = access acc locEnv gloEnv store
        let value = (getSto store1 loc) - 1
        (value, setSto store1 loc value)


 Exercise 7.5

 in CPar.fsy I changed

%token CHAR ELSE IF INT NULL PRINT PRINTLN RETURN VOID WHILE FOR
%token PLUS MINUS TIMES DIV MOD
%token EQ NE GT LT GE LE
%token NOT SEQOR SEQAND
%token LPAR RPAR LBRACE RBRACE LBRACK RBRACK SEMI COMMA ASSIGN AMP PREINC PREDEC
%token EOF

%right ASSIGN             /* lowest precedence */
%nonassoc PRINT
%left SEQOR
%left SEQAND
%left EQ NE
%nonassoc GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD
%left PREINC PREDEC
%nonassoc NOT AMP
%nonassoc LBRACK          /* highest precedence  */

ExprNotAccess:
    AtExprNotAccess                     { $1                  }
  | Access ASSIGN Expr                  { Assign($1, $3)      }
  | NAME LPAR Exprs RPAR                { Call($1, $3)        }  
  | NOT Expr                            { Prim1("!", $2)      }
  | PRINT Expr                          { Prim1("printi", $2) }
  | PRINTLN                             { Prim1("printc", nl) }
  | Expr PLUS  Expr                     { Prim2("+",  $1, $3) }
  | Expr MINUS Expr                     { Prim2("-",  $1, $3) }
  | Expr TIMES Expr                     { Prim2("*",  $1, $3) }
  | Expr DIV   Expr                     { Prim2("/",  $1, $3) }
  | Expr MOD   Expr                     { Prim2("%",  $1, $3) }
  | Expr EQ    Expr                     { Prim2("==", $1, $3) }
  | Expr NE    Expr                     { Prim2("!=", $1, $3) }
  | Expr GT    Expr                     { Prim2(">",  $1, $3) }
  | Expr LT    Expr                     { Prim2("<",  $1, $3) }
  | Expr GE    Expr                     { Prim2(">=", $1, $3) }
  | Expr LE    Expr                     { Prim2("<=", $1, $3) }
  | Expr SEQAND Expr                    { Andalso($1, $3)     }
  | Expr SEQOR  Expr                    { Orelse($1, $3)      }
  | PREINC Access                       { PreInc($2)          }
  | PREDEC Access                       { PreDec($2)          }
;


 in CLex.fsl I changed:

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }  
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | '+'             { PLUS } 
  | '-'             { MINUS } 
  | '*'             { TIMES } 
  | '/'             { DIV } 
  | '%'             { MOD }                     
  | '='             { ASSIGN } 
  | "=="            { EQ } 
  | "!="            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | "||"            { SEQOR }                     
  | "&&"            { SEQAND }                     
  | "&"             { AMP }                     
  | "!"             { NOT }                     
  | '('             { LPAR }
  | ')'             { RPAR }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | '['             { LBRACK }
  | ']'             { RBRACK }
  | ';'             { SEMI }
  | ','             { COMMA }
  | "//"            { EndLineComment lexbuf; Token lexbuf }
  | "/*"            { Comment lexbuf; Token lexbuf }
  | '"'             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF }
  | "++"            { PREINC }
  | "--"            { PREDEC }
  | _               { failwith "Lexer error: illegal symbol" }

 Examples can be seen in exercise0405/preinc.c and exercise0405/predec.c