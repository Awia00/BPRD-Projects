#Exercise 03
Anders Wind Steffensen - awis@itu.dk

## Exercise 4.1
Heres the code I ran and tested.
// marks printed result

open ParseAndRun;;

fromString("5")
// val it : Absyn.expr = CstI 5
run (fromString("5"));;
// val it : int = 5

fromString("true");;
// val it : Absyn.expr = CstB true
run (fromString("true"));;
// val it : int = 1

fromString("x");;
// val it : Absyn.expr = Var "x"

fromString("let x = 5 in x end");;
// val it : Absyn.expr = Let ("x",CstI 5,Var "x")
run (fromString("let x = 5 in x end"));;
// val it : int = 5

fromString("5+5");;
// val it : Absyn.expr = Prim ("+",CstI 5,CstI 5)
fromString("5-5");;
// val it : Absyn.expr = Prim ("-",CstI 5,CstI 5)
fromString("5*5");;
val it : Absyn.expr = Prim ("*",CstI 5,CstI 5)

fromString("if false then 5 else 10");;
// val it : Absyn.expr = If (CstB false,CstI 5,CstI 10)
run (fromString("if false then 5 else 10"));;
//val it : int = 10


fromString("let f x = x*x in f 3 end");;
// val it : Absyn.expr = Letfun ("f","x",Prim ("*",Var "x",Var "x"),Call (Var "f",CstI 3))
run (fromString("let f x = x*x in f 3 end"));;
// val it : int = 9


## Exercise 4.2
1)
fromString("let sum n = if n=1 then n else n + sum (n-1) in sum 1000 end");;
// val it : Absyn.expr =
//   Letfun
//     ("sum","n",
//      If
//        (Prim ("=",Var "n",CstI 1),Var "n",
//         Prim ("+",Var "n",Call (Var "sum",Prim ("-",Var "n",CstI 1)))),
//      Call (Var "sum",CstI 1000))
run (fromString("let sum n = if n=1 then n else n + sum (n-1) in sum 1000 end"));;
// val it : int = 500500

2)
fromString("let power n = if n=0 then 1 else 3 * power (n-1) in power 8 end");;
// val it : Absyn.expr =
//   Letfun
//     ("power","n",
//      If
//        (Prim ("=",Var "n",CstI 0),CstI 1,
//         Prim ("*",CstI 3,Call (Var "power",Prim ("-",Var "n",CstI 1)))),
//      Call (Var "power",CstI 8))
run (fromString("let power n = if n=1 then 3 else 3 * power (n-1) in power 8 end"));;
// val it : int = 6561

3)
fromString("let power n = if n=0 then 1 else 3 * power (n-1) in let sumDaPower x = if x=0 then power x else power x + sumDaPower (x-1) in sumDaPower 11 end end");;
// val it : Absyn.expr =
//   Letfun
//     ("power","n",
//      If
//        (Prim ("=",Var "n",CstI 0),CstI 1,
//         Prim ("*",CstI 3,Call (Var "power",Prim ("-",Var "n",CstI 1)))),
//      Letfun
//        ("sumDaPower","x",
//         If
//           (Prim ("=",Var "x",CstI 0),Call (Var "power",Var "x"),
//            Prim
//              ("+",Call (Var "power",Var "x"),
//               Call (Var "sumDaPower",Prim ("-",Var "x",CstI 1)))),
//         Call (Var "sumDaPower",CstI 11)))
run (fromString("let power n = if n=0 then 1 else 3 * power (n-1) in let sumDaPower x = if x=0 then power x else power x + sumDaPower (x-1) in sumDaPower 11 end end"));;
// val it : int = 265720


4)
fromString("let power n = n*n*n*n*n*n*n*n in let sumDaPower x = if x=1 then power x else power x + sumDaPower (x-1) in sumDaPower 10 end end");;
// val it : Absyn.expr =
//   Letfun
//     ("power","n",
//      Prim
//        ("*",
//         Prim
//           ("*",
//            Prim
//              ("*",
//               Prim
//                 ("*",
//                  Prim
//                    ("*",Prim ("*",Prim ("*",Var "n",Var "n"),Var "n"),Var "n"),
//                  Var "n"),Var "n"),Var "n"),Var "n"),
//      Letfun
//        ("sumDaPower","x",
//         If
//           (Prim ("=",Var "x",CstI 1),Call (Var "power",Var "x"),
//            Prim
//              ("+",Call (Var "power",Var "x"),
//               Call (Var "sumDaPower",Prim ("-",Var "x",CstI 1)))),
//         Call (Var "sumDaPower",CstI 10)))
> run (fromString("let power n = n*n*n*n*n*n*n*n in let sumDaPower x = if x=1 then power x else power x + sumDaPower (x-1) in sumDaPower 10 end end"));;
// val it : int = 167731333

## Exercise 4.3
In Absyn.fs I changed this:

type expr = 
  | CstI of int
  | CstB of bool
  | Var of string
  | Let of string * expr * expr
  | Prim of string * expr * expr
  | If of expr * expr * expr
  | Letfun of string * string list * expr * expr    (* (f, [x;y;z], fBody, letBody) *) // this is changed
  | Call of expr * expr list // this is changed

In fun.fs I changed this

type value = 
  | Int of int
  | Closure of string * string list * expr * value env       (* (f, x, fBody, fDeclEnv) *)

let rec eval (e : expr) (env : value env) : int =
    match e with 
    | CstI i -> i
    | CstB b -> if b then 1 else 0
    | Var x  ->
      match lookup env x with
      | Int i -> i 
      | _     -> failwith "eval Var"
    | Prim(ope, e1, e2) -> 
      let i1 = eval e1 env
      let i2 = eval e2 env
      match ope with
      | "*" -> i1 * i2
      | "+" -> i1 + i2
      | "-" -> i1 - i2
      | "=" -> if i1 = i2 then 1 else 0
      | "<" -> if i1 < i2 then 1 else 0
      | _   -> failwith ("unknown primitive " + ope)
    | Let(x, eRhs, letBody) -> 
      let xVal = Int(eval eRhs env)
      let bodyEnv = (x, xVal) :: env
      eval letBody bodyEnv
    | If(e1, e2, e3) -> 
      let b = eval e1 env
      if b<>0 then eval e2 env
      else eval e3 env
    | Letfun(f, x, fBody, letBody) -> 
      let bodyEnv = (f, Closure(f, x, fBody, env)) :: env 
      eval letBody bodyEnv
    | Call(Var f, eArg) -> 
      let fClosure = lookup env f
      match fClosure with
      | Closure (f, list, fBody, fDeclEnv) ->
        let xVal = List.foldBack (fun x y -> (Int(eval x env))::y) eArg []
        let fBodyEnv = List.zip list xVal @ fDeclEnv
        eval fBody fBodyEnv
      | _ -> failwith "eval Call: not a function"
    | Call _ -> failwith "eval Call: not first-order function"

I also changed all the test exprs to use lists.


## Exercise 4.4
In FunPar.fsy I added:

Names:
  | NAME                                { [$1]                   }
  | NAME Names                          { $1 :: $2               }
;

AtExprs:
  | AtExpr                              { [$1]                   }
  | AtExpr AtExprs                      { $1 :: $2               }


In FunPar.fsy I changed:

AtExpr:
    Const                               { $1                     }
  | NAME                                { Var $1                 }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)        }
  | LET NAME Names EQ Expr IN Expr END  { Letfun($2, $3, $5, $7) }
  | LPAR Expr RPAR                      { $2                     }
;

AppExpr:
  | AtExpr AtExprs                      { Call($1, $2)           }
;


## Exercise 4.5
In FunLex.fsy I changed:

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | "(*"            { commentStart := lexbuf.StartPos;
                      commentDepth := 1; 
                      SkipComment lexbuf; Token lexbuf }
  | '='             { EQ }
  | "<>"            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | '+'             { PLUS }                     
  | '-'             { MINUS }                     
  | '*'             { TIMES }                     
  | '/'             { DIV }                     
  | '%'             { MOD }
  | '('             { LPAR }
  | ')'             { RPAR }
  | "&&"            { AND }
  | "||"            { OR }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

  In FunPar.fsy I added:

  %token AND OR

  %left AND OR

  In FunPar.fsy I changed:

  Expr:
    AtExpr                              { $1                     }
  | AppExpr                             { $1                     }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)         }
  | MINUS Expr                          { Prim("-", CstI 0, $2)  }
  | Expr PLUS  Expr                     { Prim("+",  $1, $3)     }
  | Expr MINUS Expr                     { Prim("-",  $1, $3)     }
  | Expr TIMES Expr                     { Prim("*",  $1, $3)     }
  | Expr DIV   Expr                     { Prim("/",  $1, $3)     } 
  | Expr MOD   Expr                     { Prim("%",  $1, $3)     }
  | Expr EQ    Expr                     { Prim("=",  $1, $3)     }
  | Expr NE    Expr                     { Prim("<>", $1, $3)     }
  | Expr GT    Expr                     { Prim(">",  $1, $3)     }
  | Expr LT    Expr                     { Prim("<",  $1, $3)     }
  | Expr GE    Expr                     { Prim(">=", $1, $3)     }
  | Expr LE    Expr                     { Prim("<=", $1, $3)     }
  | Expr AND   Expr                     { If($1, $3, CstB false) }
  | Expr OR    Expr                     { If($1, CstB true, $3)  }
;