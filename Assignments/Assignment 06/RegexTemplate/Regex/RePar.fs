// Implementation file for parser generated by fsyacc
module RePar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "RePar.fsy"

 open Absyn;

# 10 "RePar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | EPS
  | STAR
  | OR
  | CHAR of (char)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EPS
    | TOKEN_STAR
    | TOKEN_OR
    | TOKEN_CHAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Re
    | NONTERM_Res
    | NONTERM_ReFinal

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | EPS  -> 3 
  | STAR  -> 4 
  | OR  -> 5 
  | CHAR _ -> 6 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_EPS 
  | 4 -> TOKEN_STAR 
  | 5 -> TOKEN_OR 
  | 6 -> TOKEN_CHAR 
  | 9 -> TOKEN_end_of_input
  | 7 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Re 
    | 3 -> NONTERM_Re 
    | 4 -> NONTERM_Res 
    | 5 -> NONTERM_Res 
    | 6 -> NONTERM_ReFinal 
    | 7 -> NONTERM_ReFinal 
    | 8 -> NONTERM_ReFinal 
    | 9 -> NONTERM_ReFinal 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 9 
let _fsyacc_tagOfErrorTerminal = 7

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EPS  -> "EPS" 
  | STAR  -> "STAR" 
  | OR  -> "OR" 
  | CHAR _ -> "CHAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EPS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 6us; 4us; 13us; 5us; 3us; 65535us; 0us; 7us; 6us; 7us; 13us; 7us; 4us; 65535us; 0us; 9us; 6us; 9us; 7us; 8us; 13us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 9us; 1us; 2us; 2us; 3us; 4us; 2us; 4us; 8us; 2us; 5us; 8us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 15us; 17us; 20us; 23us; 26us; 28us; 30us; 32us; 34us; |]
let _fsyacc_action_rows = 15
let _fsyacc_actionTableElements = [|3us; 32768us; 1us; 13us; 3us; 11us; 6us; 10us; 0us; 49152us; 2us; 32768us; 0us; 3us; 5us; 6us; 0us; 16385us; 0us; 16386us; 2us; 32768us; 2us; 14us; 5us; 6us; 3us; 32768us; 1us; 13us; 3us; 11us; 6us; 10us; 3us; 16387us; 1us; 13us; 3us; 11us; 6us; 10us; 1us; 16388us; 4us; 12us; 1us; 16389us; 4us; 12us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 3us; 32768us; 1us; 13us; 3us; 11us; 6us; 10us; 0us; 16393us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 8us; 9us; 10us; 13us; 17us; 21us; 23us; 25us; 26us; 27us; 28us; 32us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 1us; 2us; 1us; 1us; 1us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 16391us; 16392us; 65535us; 16393us; |]
let _fsyacc_reductions ()  =    [| 
# 114 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.re)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 123 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.re)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "RePar.fsy"
                                                               _1                     
                   )
# 24 "RePar.fsy"
                 : Absyn.re));
# 134 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.re)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.re)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "RePar.fsy"
                                                               Choice(_1, _3)         
                   )
# 28 "RePar.fsy"
                 : Absyn.re));
# 146 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Res)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "RePar.fsy"
                                                               _1                     
                   )
# 29 "RePar.fsy"
                 : Absyn.re));
# 157 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Res)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReFinal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "RePar.fsy"
                                                               Seq(_1, _2)            
                   )
# 33 "RePar.fsy"
                 : 'Res));
# 169 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReFinal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "RePar.fsy"
                                                               _1                     
                   )
# 34 "RePar.fsy"
                 : 'Res));
# 180 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "RePar.fsy"
                                                               Char(_1)               
                   )
# 38 "RePar.fsy"
                 : 'ReFinal));
# 191 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "RePar.fsy"
                                                               Eps                    
                   )
# 39 "RePar.fsy"
                 : 'ReFinal));
# 201 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ReFinal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "RePar.fsy"
                                                               Star(_1)               
                   )
# 40 "RePar.fsy"
                 : 'ReFinal));
# 212 "RePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.re)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "RePar.fsy"
                                                               _2                     
                   )
# 41 "RePar.fsy"
                 : 'ReFinal));
|]
# 224 "RePar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 10;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.re =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
